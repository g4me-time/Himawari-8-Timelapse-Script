import wx
import wx.adv
import numpy as np
import wget
from datetime import timedelta, datetime
import sys
import time
from PIL import Image
import os

class HimawariDownloader():
    def __init__(self,frame):
        self.filepath = os.getcwd()+'/'
        self.base_url = 'http://himawari8-dl.nict.go.jp/himawari8/img/D531106/{1}d/550/{0:%Y/%m/%d/%H%M%S}_{2}_{3}.png'
        self.temp_folder='temp-Him8'
        self.temp_thumbnail='temp-Him8-thumb'
        self.Result_folder='Result-Him8'
        self.createFolder(self.Result_folder)
        self.frame=frame
        
    def setProgressbar(self, ProgressBar):
        self.ProgressBar=ProgressBar
        
    def SetStartDate(self, year,month,day,hour,minutes):
        self.start_date = datetime(year, month, day, hour, minutes, 0)
        
    def createFolder(self, dirName):
        if not os.path.exists(self.filepath+dirName):
            os.mkdir(self.filepath+dirName)
    
    def thumbnail(self):
        return self.filepath+self.temp_thumbnail+'/thumbnail.png'
    
    def LoadThumbnail(self):
        self.createFolder(self.temp_thumbnail)
        return self.__download(self.start_date, 1, name='thumbnail', destination=self.temp_thumbnail)
        
    def StartDownload(self, frames, startframe, resolution, from_x=0, number_x=1, from_y=0, number_y=1):
        self.ProgressBar.SetRange(frames-startframe)
        for it in range(startframe-1,frames):
            self.ProgressBar.SetValue(it-startframe+1)
            #self.ProgressBar.Pulse()
            self.frame.drawRectangle()
            if not self.__download(self.start_date + timedelta(minutes=10*it), resolution, it+1, self.Result_folder, from_x, number_x, from_y, number_y):
                return False
        return True
    
    def __download(self, time, resolution, name, destination, from_x=0, number_x=1, from_y=0, number_y=1):
        self.createFolder(self.temp_folder)
        self.__removeTempFiles()
        try:
            tiles_x=np.arange(number_x)+from_x
            tiles_y=np.arange(number_y)+from_y
            for tile_x in tiles_x:
                for tile_y in tiles_y:
                    try:
                        filename = wget.download(self.base_url.format(time,resolution,tile_x,tile_y),self.filepath+'temp-Him8/{0}-{1}.png'.format(tile_x,tile_y))
                    except:
                        return False
            self.__mergeImages(name, destination, tiles_x, tiles_y)
            self.__removeTempFiles()
            return True
        except:
            return False
    
    def __removeTempFiles(self):
        filelist = [ f for f in os.listdir(self.filepath+self.temp_folder) if f.endswith(".png") ]
        for f in filelist:
            os.remove(os.path.join(self.filepath+self.temp_folder+'/', f))

    def __mergeImages(self, name, destination, tiles_x=np.array([0]), tiles_y=np.array([0])):
        images = [[Image.open(self.filepath+self.temp_folder+'/{0}-{1}.png'.format(x,y)) for x in tiles_x] for y in tiles_y] 
        total_width = 550*tiles_x.size
        max_height = 550*tiles_y.size

        new_im = Image.new('RGB', (total_width, max_height))

        x_offset = 0
        y_offset = 0
        for x in np.arange(tiles_x.size):
            x_offset=x*550
            for y in np.arange(tiles_y.size):
                y_offset=y*550
                new_im.paste(images[y][x], (x_offset,y_offset))
        if isinstance(name, int):
            new_im.save(self.filepath+destination+'/{0:04d}.png'.format(name))
        else:
            new_im.save(self.filepath+destination+'/{0}.png'.format(name))
        self.__removeTempFiles()
        
class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetClientSize((600, 700))
        self.datepicker_ctrl_1 = wx.adv.DatePickerCtrl(self, wx.ID_ANY)
        self.choice_6 = wx.Choice(self, wx.ID_ANY, choices=["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"])
        self.choice_5 = wx.Choice(self, wx.ID_ANY, choices=["00", "10", "20", "30", "40", "50"])
        self.button_1 = wx.Button(self, wx.ID_ANY, "Update Image")
        self.choice_3 = wx.Choice(self, wx.ID_ANY, choices=["1x1", "2x2", "4x4", "8x8", "16x16", "20x20"])
        self.spin_ctrl_5 = wx.SpinCtrl(self, wx.ID_ANY, "100", min=1, max=9999)
        self.spin_ctrl_6 = wx.SpinCtrl(self, wx.ID_ANY, "1", min=1, max=9999)
        self.button_2 = wx.Button(self, wx.ID_ANY, "button_2")
        self.HimawariDownloader=HimawariDownloader(self)
        self.thumbnail=''
        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.adv.EVT_DATE_CHANGED, self.DateChanged, self.datepicker_ctrl_1)
        self.Bind(wx.EVT_CHOICE, self.HourChanged, self.choice_6)
        self.Bind(wx.EVT_CHOICE, self.MinutesChanged, self.choice_5)
        self.Bind(wx.EVT_BUTTON, self.UpdateImage, self.button_1)
        self.Bind(wx.EVT_CHOICE, self.ResolutionChanged, self.choice_3)
        self.Bind(wx.EVT_BUTTON, self.DownloadStart, self.button_2)
        wx.EVT_MOTION

    def __set_properties(self):
        self.SetTitle("frame")
        self.choice_6.SetSelection(2)
        self.choice_5.SetSelection(0)
        self.button_1.SetMinSize((-1, 23))
        self.choice_3.SetSelection(5)
        self.datepicker_ctrl_1.SetValue(wx.DateTime.Today().Add(wx.DateSpan(days=-1)))
        self.isPressed=False
        self.tile_number=20
        self.startPos=wx.Point(0,0)
        self.endPos=self.startPos
        self.Tiles2Pixel()
        self.Bind(wx.EVT_MOTION, self.ImageCtrl_OnMouseMove)
        self.Bind(wx.EVT_LEFT_DOWN, self.ImageCtrl_OnMouseDown)
        self.Bind(wx.EVT_LEFT_UP, self.ImageCtrl_OnMouseUp)
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.setStartDate()


    def __do_layout(self):
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.datepicker_ctrl_1, 0, wx.ALIGN_CENTER | wx.ALL, 4)
        sizer_3.Add(self.choice_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.LEFT | wx.TOP, 4)
        label_2 = wx.StaticText(self, wx.ID_ANY, ":")
        sizer_3.Add(label_2, 0, wx.ALIGN_CENTER, 0)
        sizer_3.Add(self.choice_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.RIGHT | wx.TOP, 4)
        sizer_3.Add(self.button_1, 0, wx.ALIGN_CENTER | wx.ALL, 4)
        self.label_2_1 = wx.StaticText(self, wx.ID_ANY, "Output resolution: 0x0")
        sizer_3.Add(self.label_2_1, 0, wx.ALIGN_CENTER, 0)
        sizer_2.Add(sizer_3, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        sizer_4.Add(self.choice_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        label_3 = wx.StaticText(self, wx.ID_ANY, "Number of Frames:")
        sizer_4.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        sizer_4.Add(self.spin_ctrl_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        label_4 = wx.StaticText(self, wx.ID_ANY, "Start at Frame:")
        sizer_4.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        sizer_4.Add(self.spin_ctrl_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        sizer_2.Add(sizer_4, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        self.empty_box=sizer_2.Add((550, 550), 0, wx.ALIGN_CENTER | wx.ALL, 0)
        sizer_5.Add(self.button_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        self.loadingBar=wx.Gauge(self, id=wx.ID_ANY, size=(400, 23))
        sizer_5.Add(self.loadingBar, 0, wx.ALIGN_CENTER , 0) # Ladebalken
        label_5 = wx.StaticText(self, wx.ID_ANY, "0.0%")
        sizer_5.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 4)
        sizer_2.Add(sizer_5, 1, wx.EXPAND, 0)
        self.HimawariDownloader.setProgressbar(self.loadingBar)
        self.SetSizer(sizer_2)
        self.Layout()
        self.UpdateImage(None)
        self.drawRectangle()

        
    def setStartDate(self):
        self.HimawariDownloader.SetStartDate(self.datepicker_ctrl_1.GetValue().GetYear(),
                                             self.datepicker_ctrl_1.GetValue().GetMonth()+1,
                                             self.datepicker_ctrl_1.GetValue().GetDay(),
                                             self.choice_6.GetSelection(),
                                             self.choice_5.GetSelection()*10)
    
    def DateChanged(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'DateChanged' not implemented!")
        event.Skip()

    def HourChanged(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'HourChanged' not implemented!")
        event.Skip()

    def MinutesChanged(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'MinutesChanged' not implemented!")
        event.Skip()

    def UpdateImage(self, event):  # wxGlade: MyFrame.<event_handler>
        self.setStartDate()
        if self.HimawariDownloader.LoadThumbnail():
            self.thumbnail=self.HimawariDownloader.thumbnail()
            self.drawRectangle()


    def ResolutionChanged(self, event):  # wxGlade: MyFrame.<event_handler>
        choice = event.GetEventObject()
        possible_values=[1,2,4,8,16,20]
        self.tile_number=possible_values[choice.GetCurrentSelection()]
        self.drawRectangle()
        
    def DownloadStart(self, event):
        tile_x1, tile_y1, tile_x2, tile_y2 = self.GetTiles()
        self.HimawariDownloader.StartDownload(self.spin_ctrl_5.GetValue(), self.spin_ctrl_6.GetValue(), self.tile_number, 
                                              from_x=tile_x1, number_x=tile_x2-tile_x1+1, from_y=tile_y1, number_y=tile_y2-tile_y1+1)
        
    
    def NOT_OnPaint(self, event):
        dc = wx.PaintDC(self)
        dc.clear()
    
    def BoundariesTiles(self, tile_number):
        return np.max([0, np.min([self.tile_number-1, tile_number])])
    
    def GetTiles(self):
        #print(self.startPos.x,self.endPos.x,self.startPos.y,self.endPos.y)
        tile_x1=int(np.floor(np.min([self.startPos.x,self.endPos.x])*self.tile_number/550))
        tile_x2=int(np.floor(np.max([self.startPos.x,self.endPos.x])*self.tile_number/550))
        tile_y1=int(np.floor(np.min([self.startPos.y,self.endPos.y])*self.tile_number/550))
        tile_y2=int(np.floor(np.max([self.startPos.y,self.endPos.y])*self.tile_number/550))
        return [self.BoundariesTiles(tile_x1), self.BoundariesTiles(tile_y1), self.BoundariesTiles(tile_x2), self.BoundariesTiles(tile_y2)]
    
    def Tiles2Pixel(self):
        tile_x1, tile_y1, tile_x2, tile_y2 = self.GetTiles()
        self.startPix=wx.Point(int(round(tile_x1/self.tile_number*550)),int(round(tile_y1/self.tile_number*550)))
        self.endPix=wx.Point(int(round((tile_x2+1)/self.tile_number*550)),int(round((tile_y2+1)/self.tile_number*550)))
    
    def OnPaint(self, event):
        if len(self.thumbnail)<1:
            return
        dc = wx.MemoryDC(wx.Bitmap(self.thumbnail, wx.BITMAP_TYPE_ANY))
        dc.SetPen(wx.Pen('#f00000', 1, wx.SOLID))
        dc.SetBrush(wx.Brush("grey", wx.TRANSPARENT))
        #self.Tiles2Pixel()
        dc.DrawRectangle(self.startPix.x, self.startPix.y, self.endPix.x-self.startPix.x, self.endPix.y-self.startPix.y)
        dc_new=wx.PaintDC(self)
        dc_new.Blit(self.empty_box.GetPosition().x, self.empty_box.GetPosition().y, 550, 550, dc, 0, 0)
        dc.SelectObject(wx.NullBitmap)
        
    def ImageCtrl_OnMouseMove(self, event):
        if self.isPressed:
            ctrl_pos = event.GetPosition()-self.empty_box.GetPosition()
            self.endPos=ctrl_pos
            self.drawRectangle()
    
    def ImageCtrl_OnMouseDown(self, event):
        self.isPressed=True
        ctrl_pos = event.GetPosition()-self.empty_box.GetPosition()
        self.startPos=ctrl_pos
        self.endPos=self.startPos
        self.drawRectangle()

    def ImageCtrl_OnMouseUp(self, event):
        self.isPressed=False
        ctrl_pos = event.GetPosition()-self.empty_box.GetPosition()
        self.endPos=ctrl_pos
        self.drawRectangle()
    
    def drawRectangle(self):
        self.Tiles2Pixel()
        tile_x1, tile_y1, tile_x2, tile_y2 = self.GetTiles()
        self.label_2_1.SetLabel('Output resolution: {0}x{1}'.format((tile_x2-tile_x1+1)*550,(tile_y2-tile_y1+1)*550))
        self.Refresh()
        
# end of class MainFraim

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
